* Notes for xlingtool.c

  This is a plugin for GIMP to process an images composed from
  several layers into a set of source code files in C to be
  added to the firmware project in order to create a scene
  (or scenes) on a display with animations, transitions, etc.

  Personally, I'd like to test an idea to keep links to the
  specific places in xlingtool.c with my own comments here.
  It might help me to remember what I wanted to do with the source
  code.

* Compilation notes

  Additional flags and parameters should be provided to link xlingtool.c
  against OpenSSL:

      $ CFLAGS="-I/usr/local/include" LIBS="-L/usr/local/lib -lssl -lcrypto" gimptool-2.0 --install ./xlingtool.c

* Places of interest in the code

  [[file:xlingtool.c::gimp_drawable_offsets(drawable->drawable_id, &off_x, &off_y);][Coordinates of the top-left corner of a layer on the image]]

  These coordinates will be useful when I'll have a need to generate
  a header file to describe a whole scene (or scenes) which is composed
  from different layers. Drawable itself has width (=drawable->width=)
  and heigh (=drawable->height=) parameters which help to determine actual
  size of the layer image.

  [[file:xlingtool.c::/* * Run external converter to generate a header * file (or files) from the layer image. */ rc = system(_text_buf);][Run external converter to generate a header file]]

  =system()= function from C standard library is used to run LCD Image Converter
  as an external program. This approach might contain possible vulnerabilities
  according to [[https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177][this article]]. It'd be better to use =execve()= on POSIX-compatible
  operating systems or =CreateProcess()= on Windows.

* General thoughts

  I still have to design a structure to describe a whole scene with its
  static images, animations and others. Moreover, different scenes can be
  linked together to make a path between them.

  Layers of the images which contain some graphics can be exported to a directory
  called "blocks" like header file named after SHA-1 hash of the actual graphics
  data of their layers, like:

      output_dir
          blocks
              cbe3d71d8c6e07d445c76774a47451d3143444a5.h
              957c61374526d916c92d1af83006c320fbae64fa.h
              5498bcc596a7f9c32b4700ee96d8c28d269f93df.h
              5498bcc596a7f9c32b4700ee96d8c28d269f93df_a.h
          scenes
              ...

  This approach will help to re-use existing "building" blocks in different
  scenes.

  At the moment, I've header files generated by LCD Image Converter to describe
  images and their alpha channels contain variables like:

      const MSIM_SH1106Image_t XG_IMG_smoking_0;
      const uint8_t PROGMEM XG_IMGA_smoking_0[1024];

  Names of these variables can also be changed to something like:

      const MSIM_SH1106Image_t XG_IMG_cbe3d71d8c6e07d445c76774a47451d3143444a;
      const uint8_t PROGMEM XG_IMGA_cbe3d71d8c6e07d445c76774a47451d3143444[1024];

  in order to refer to these variables by their hashes in code. It'll help to
  simplify code generation for different scenes which will be using same blocks.

  OpenSSL provides several [[https://www.openssl.org/docs/man1.1.0/man3/SHA1.html][functions]] which start with =SHA1_= to compute SHA-1
  hash. The only concern here is that Xlingtool will be dependent on OpenSSL.

  I think that it might be possible to calculate SHA-1 hash based on the image
  data obtained in [[https://developer.gimp.org/api/2.0/libgimp/libgimp-gimppixelrgn.html#gimp-pixel-rgn-get-row][rows]]. See [[https://developer.gimp.org/writing-a-plug-in/2/index.html][this tutorial]] and its section named
  "Row processing". Source code is available [[https://developer.gimp.org/writing-a-plug-in/2/myblur2.c][there]].
