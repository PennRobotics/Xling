/*-
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 * This file is part of a firmware for Xling, a tamagotchi-like toy.
 *
 * Copyright (c) 2020 Dmitry Salychev
 *
 * Xling firmware is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Xling firmware is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#ifndef XG_FONT_$(doc_name)_H_
#define XG_FONT_$(doc_name)_H_ 1

#include <stdint.h>
#include <avr/pgmspace.h>

/*
 * This file with bitmap font has been generated for Xling,
 * a tamagotchi-like toy, by LCD Image Converter.
 *
 * Data type: $(doc_data_type)
 * Filename: $(doc_name)
 *
 * Family: $(fnt_family)
 * Size: $(fnt_size)
 * Style: $(fnt_style)
 * Antialiasing: $(fnt_antialiasing)
 * Type: $(fnt_width_type)
 * Encoding: $(fnt_encoding)
 * Unicode BOM: $(fnt_use_bom)
 *
 * Preset name: $(out_preset_name)
 * Data block size: $(img_data_block_size) bit(s), uint$(img_data_block_size)_t
 * RLE compression: $(img_rle)
 * Conversion type: $(pre_conv_type), $(pre_mono_type) $(pre_mono_edge)
 * Bits per pixel: $(out_bpp)
 * Bands used: $(bands)
 * Band width: $(bandWidth)
 * Main scan direction: $(pre_scan_main)
 * Line scan direction: $(pre_scan_sub)
 * Inverse colors: $(pre_inverse)
 */

/* Xling graphics header */
#include "xling/graphics.h"

/* Glyphs bitmap */
static const uint$(img_data_block_size)_t PROGMEM XG_FONT_$(doc_name)_bitmaps[] = {
$(start_block_images_table)
	$(out_image_data),
$(end_block_images_table)
};

/* Glyphs */
static const XG_Glyph_t XG_FONT_$(doc_name)_glyphs[] = {
$(start_block_images_table)
	{ .code=0x$(out_char_code), .data=&XG_FONT_$(doc_name)_bitmaps[$(out_char_offset)], .width=$(out_image_width), .height=$(out_image_height), .data_size=$(img_data_block_size), },	/* '$(out_char_text)' */
$(end_block_images_table)
};

/* Font */
$(start_block_font_def)
const XG_Font_t XG_FONT_$(doc_name) = {
	.length = $(out_images_count),
	.glyphs = XG_FONT_$(doc_name)_glyphs,
};
$(end_block_font_def)
#endif /* XG_FONT_$(doc_name)_H_ */
